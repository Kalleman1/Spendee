<!-- Pages/Login.razor -->
@page "/login"

@using SpendeeClient.Interfaces;
@using SpendeeClient.Models;

@inject IAuthService AuthService

<div class="login-container">
    <img src="images/SpendeeLogo.png" alt="Spendee Logo" class="logo-style" />
    
    <div class="form-container">
        <h3>Log in to your account</h3>
        <EditForm Model="@user" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="item-container">
                <InputText class="input" id="email" @bind-Value="user.Email" placeholder="Email" />
            </div>
            <div class="item-container">
                <InputText class="input" id="password" @bind-Value="user.Password" type="password" placeholder="Password" />
            </div>
            
            @if (errorMessage != string.Empty)
            {
                <div class="item-container">
                    <p class="custom-p error-message">@errorMessage</p>
                </div>
            }
            
            
            <div class="item-container">
                @if (isLoading)
                {
                    <div class="spinner"></div>
                }
                else
                {
                    <button class="custom-button" type="submit">Login</button>
                }
            </div>

            <div class="item-container">
                <p class="custom-p">Dont have an account yet?</p>
                <a class="custom-anchor" onclick="@NavigateToRegister">Register</a>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private User user = new User();
    private string errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            // Simulate a short delay to see spinner
            await Task.Delay(1000);

            var result = await AuthService.Login(user);
            if (result.IsSuccess)
            {
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                errorMessage = result.Error;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}